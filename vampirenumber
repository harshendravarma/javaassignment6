package assignment2;

import java.util.Scanner;

class Vampire{
	int[] getarrayofnumbers(int number) {
		int remainder,i=0;
		int length = (int) (Math.log10(number) + 1);
		int arr[] = new int[length];
		while(number!=0){
			remainder = number%10;
			arr[i] = remainder;
			number = number/10;
			i++;
			}
		return arr;
	}
	 Boolean permuteHelper(int[] arr, int index,int number){
		 Boolean x=false;
	    if(index >= arr.length - 1){ //If we are at the last element - nothing left to permute
	        //System.out.println(Arrays.toString(arr));
	        //Print the array
	    	if(this.isvampire(arr,number)) {
	    		//System.out.print(number);
	    		return true;
	    	}
	    	else {
	    		return false;
	    	}

	    }

	    for(int i = index; i < arr.length; i++){ //For each index in the sub array arr[index...end]

	        //Swap the elements at indices index and i
	        int t = arr[index];
	        arr[index] = arr[i];
	        arr[i] = t;

	        //Recurse on the sub array arr[index+1...end]
	        permuteHelper(arr, index+1,number);

	        //Swap the elements back
	        t = arr[index];
	        arr[index] = arr[i];
	        arr[i] = t;
	    }
	
	   
	}
	 
	Boolean isvampire(int[] arr,int number) {
		int firsthalfsum=0;
		int secondhalfsum=0;
		for(int i=0;i<(arr.length)/2;i++) {
			firsthalfsum+=arr[i]*Math.pow(10,(arr.length)/2-i-1);
		}
		for(int i=(arr.length)/2;i<arr.length;i++) {
			secondhalfsum+=arr[i]*Math.pow(10,(arr.length-i-1));
		}
		//System.out.println(firsthalfsum);
		//System.out.println(secondhalfsum);
		if(firsthalfsum*secondhalfsum==number) {
			return true;
		}
		return false;
	}
	
	void printFirstHundredVampireNumbers() {
		System.out.println(this.getarrayofnumbers(1260));
	}
	}

public class Main {
	public static void main(String[] args) {
	
		Vampire v=new Vampire();
		System.out.print(v.permuteHelper(new int[]{1,2,6,0},0,1260));
	
	}
}
